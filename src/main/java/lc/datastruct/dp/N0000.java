package lc.datastruct.dp;

/**
 * @Desc 背包问题示例
 * @Author h2linlin
 */
public class N0000 {
    /**
     * 二维数组方式：
     * dp[i][j]：
     *  i：在编号为0-i的物品里面选
     *  j：背包容量
     *  dp[i][j]：此时的最大价值
     *
     *  递推到物品i时，分两种情况：
     *      1.不装物品i。（1）有足够的空间，但是性价比不高，不装。（2）没有足够的空间，也不装，因为i性价比不高。
     *      2.装物品i。  （1）有足够的空间，i性价比也高，装入。（2）没有足够的空间，但是i性价比高。那么置换腾出i的位置来，装入。
     *
     *  不管是4种情况的那种，最终就是两种情况，装和不装。
     *      1.装：需要给i留出空间，所以：当前最大价值 = 给i留空间后剩余空间的最大价值 + i的价值。dp[i][j] = dp[i-1][j-weight[i]] + value[i]
     *      2.不装：不需要给i留空间，也不需要增加i的价值。dp[i][j] = dp[i-1][j]
     *      3.以上两种取最大值即可。即 dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight[i]] + value[i])
     */

}
